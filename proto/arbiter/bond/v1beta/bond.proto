syntax = "proto3";
package arbiter.bond.v1beta1;

import "gogoproto/gogo.proto";

option go_package = "github.com/sapiens-cosmos/arbiter/x/bond/types";

message BondState {
  string totalDebt = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"total_debt\""
  ];
  int64 lastDecay = 2 [(gogoproto.moretags) = "yaml:\"last_decay\""];
  repeated Bond bonds = 3 [(gogoproto.moretags) = "yaml:\"bonds\""];
  bool isLiquidityBond = 4 [(gogoproto.moretags) = "yaml:\"is_liquidity_bond\""];
  string principle = 5 [(gogoproto.moretags) = "yaml:\"principle\""];
}

message Terms {
  // scaling variable for price
  string controlVariable = 1 [
   (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
   (gogoproto.nullable) = false,
   (gogoproto.moretags) = "yaml:\"control_variable\""
   ];
  // vestingTerm represented in blocks
  int64 vestingTerm = 2 [(gogoproto.moretags) = "yaml:\"vesting_term\""];
  int64 minimumPrice = 3 [(gogoproto.moretags) = "yaml:\"minimum_price\""];
  int64 maxPayout = 4 [(gogoproto.moretags) = "yaml:\"max_payout\""];
  int64 fee = 5 [(gogoproto.moretags) = "yaml:\"fee\""];
  int64 maxDebt = 6 [(gogoproto.moretags) = "yaml:\"max_debt\""];
}

message Bond {
  // # of tokens remaining to be paid
  uint64 payout = 1 [(gogoproto.moretags) = "yaml:\"payout\""];
  // blocks left for vesting
  uint64 vesting = 2 [(gogoproto.moretags) = "yaml:\"vesting\""];
  // last interaction
  uint64 lastBlock = 3 [(gogoproto.moretags) = "yaml:\"last_block\""];
  //  IN USD, for front end viewing
  uint64 pricePaid = 4 [(gogoproto.moretags) = "yaml:\"price_paid\""];
}



