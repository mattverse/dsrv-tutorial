// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arbiter/stake/v1beta/stake.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Lock struct {
	Owner string     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty" yaml:"owner"`
	Coin  types.Coin `protobuf:"bytes,2,opt,name=coin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coin"`
}

func (m *Lock) Reset()         { *m = Lock{} }
func (m *Lock) String() string { return proto.CompactTextString(m) }
func (*Lock) ProtoMessage()    {}
func (*Lock) Descriptor() ([]byte, []int) {
	return fileDescriptor_7625c0f5305f72c2, []int{0}
}
func (m *Lock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Lock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Lock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Lock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Lock.Merge(m, src)
}
func (m *Lock) XXX_Size() int {
	return m.Size()
}
func (m *Lock) XXX_DiscardUnknown() {
	xxx_messageInfo_Lock.DiscardUnknown(m)
}

var xxx_messageInfo_Lock proto.InternalMessageInfo

func (m *Lock) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Lock) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type Epoch struct {
	EndBlock   int64 `protobuf:"varint,1,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	Number     int64 `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Length     int64 `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`
	Distribute int64 `protobuf:"varint,4,opt,name=distribute,proto3" json:"distribute,omitempty"`
}

func (m *Epoch) Reset()         { *m = Epoch{} }
func (m *Epoch) String() string { return proto.CompactTextString(m) }
func (*Epoch) ProtoMessage()    {}
func (*Epoch) Descriptor() ([]byte, []int) {
	return fileDescriptor_7625c0f5305f72c2, []int{1}
}
func (m *Epoch) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Epoch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Epoch.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Epoch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Epoch.Merge(m, src)
}
func (m *Epoch) XXX_Size() int {
	return m.Size()
}
func (m *Epoch) XXX_DiscardUnknown() {
	xxx_messageInfo_Epoch.DiscardUnknown(m)
}

var xxx_messageInfo_Epoch proto.InternalMessageInfo

func (m *Epoch) GetEndBlock() int64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *Epoch) GetNumber() int64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Epoch) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *Epoch) GetDistribute() int64 {
	if m != nil {
		return m.Distribute
	}
	return 0
}

type StakeState struct {
	TotalReserve github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=total_reserve,json=totalReserve,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_reserve" yaml:"weight"`
	Epoch        Epoch                                  `protobuf:"bytes,2,opt,name=epoch,proto3" json:"epoch"`
}

func (m *StakeState) Reset()         { *m = StakeState{} }
func (m *StakeState) String() string { return proto.CompactTextString(m) }
func (*StakeState) ProtoMessage()    {}
func (*StakeState) Descriptor() ([]byte, []int) {
	return fileDescriptor_7625c0f5305f72c2, []int{2}
}
func (m *StakeState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StakeState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StakeState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StakeState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StakeState.Merge(m, src)
}
func (m *StakeState) XXX_Size() int {
	return m.Size()
}
func (m *StakeState) XXX_DiscardUnknown() {
	xxx_messageInfo_StakeState.DiscardUnknown(m)
}

var xxx_messageInfo_StakeState proto.InternalMessageInfo

func (m *StakeState) GetEpoch() Epoch {
	if m != nil {
		return m.Epoch
	}
	return Epoch{}
}

func init() {
	proto.RegisterType((*Lock)(nil), "arbiter.stake.v1beta1.Lock")
	proto.RegisterType((*Epoch)(nil), "arbiter.stake.v1beta1.Epoch")
	proto.RegisterType((*StakeState)(nil), "arbiter.stake.v1beta1.StakeState")
}

func init() { proto.RegisterFile("arbiter/stake/v1beta/stake.proto", fileDescriptor_7625c0f5305f72c2) }

var fileDescriptor_7625c0f5305f72c2 = []byte{
	// 423 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x49, 0x52, 0xd1, 0xa5, 0x95, 0x90, 0x05, 0x28, 0x14, 0xb4, 0x8e, 0x7c, 0xa8, 0x72,
	0xe9, 0x2e, 0x81, 0x0b, 0xe2, 0x82, 0x64, 0xc4, 0xa1, 0x12, 0x27, 0xf7, 0xc6, 0x25, 0xda, 0xb5,
	0x47, 0xce, 0x2a, 0xc9, 0x6e, 0xb4, 0x3b, 0x69, 0xe9, 0x57, 0xc0, 0x77, 0x20, 0x3e, 0xa4, 0xc7,
	0x1e, 0x11, 0x07, 0x83, 0x92, 0x3f, 0xe8, 0x17, 0xa0, 0xdd, 0x75, 0xa4, 0x1e, 0x38, 0x70, 0xb2,
	0xe7, 0xcd, 0x9b, 0xe7, 0x37, 0xcf, 0x43, 0xc6, 0xc2, 0x4a, 0x85, 0x60, 0xb9, 0x43, 0xb1, 0x00,
	0x7e, 0x39, 0x95, 0x80, 0x22, 0x16, 0x6c, 0x6d, 0x0d, 0x9a, 0xf4, 0x69, 0xc7, 0x60, 0x11, 0x8c,
	0x8c, 0xe9, 0xc9, 0x93, 0xc6, 0x34, 0x26, 0x30, 0xb8, 0x7f, 0x8b, 0xe4, 0x13, 0x5a, 0x19, 0xb7,
	0x32, 0x8e, 0x4b, 0xe1, 0xf6, 0x62, 0x53, 0x5e, 0x19, 0xa5, 0x63, 0x3f, 0xff, 0x9a, 0x90, 0xc1,
	0x27, 0x53, 0x2d, 0xd2, 0x53, 0x32, 0x34, 0x57, 0x1a, 0xec, 0x28, 0x19, 0x27, 0x93, 0xc3, 0xe2,
	0xf1, 0x5d, 0x9b, 0x1d, 0x5d, 0x8b, 0xd5, 0xf2, 0x5d, 0x1e, 0xe0, 0xbc, 0x8c, 0xed, 0x74, 0x46,
	0x06, 0x7e, 0x7c, 0xf4, 0x60, 0x9c, 0x4c, 0x1e, 0xbd, 0x7e, 0xce, 0xa2, 0x3e, 0xf3, 0xfa, 0x7b,
	0x2b, 0xec, 0x83, 0x51, 0xba, 0x78, 0x75, 0xd3, 0x66, 0xbd, 0xef, 0xbf, 0xb3, 0x49, 0xa3, 0x70,
	0xbe, 0x91, 0xac, 0x32, 0x2b, 0xde, 0x99, 0x89, 0x8f, 0x33, 0x57, 0x2f, 0x38, 0x5e, 0xaf, 0xc1,
	0x85, 0x01, 0x57, 0x06, 0xe1, 0x1c, 0xc9, 0xf0, 0xe3, 0xda, 0x54, 0xf3, 0xf4, 0x05, 0x39, 0x04,
	0x5d, 0xcf, 0xe4, 0xd2, 0x54, 0x8b, 0xe0, 0xaa, 0x5f, 0x3e, 0x04, 0x5d, 0x17, 0xbe, 0x4e, 0x9f,
	0x91, 0x03, 0xbd, 0x59, 0x49, 0xb0, 0xc1, 0x48, 0xbf, 0xec, 0x2a, 0x8f, 0x2f, 0x41, 0x37, 0x38,
	0x1f, 0xf5, 0x23, 0x1e, 0xab, 0x94, 0x12, 0x52, 0x2b, 0x87, 0x56, 0xc9, 0x0d, 0xc2, 0x68, 0x10,
	0x7a, 0xf7, 0x90, 0xfc, 0x47, 0x42, 0xc8, 0x85, 0xcf, 0xf3, 0x02, 0x05, 0x42, 0x5a, 0x93, 0x63,
	0x34, 0x28, 0x96, 0x33, 0x0b, 0x0e, 0xec, 0x25, 0x74, 0xa9, 0xbc, 0xf7, 0x3b, 0xfd, 0x6a, 0xb3,
	0xd3, 0xff, 0xd8, 0xe9, 0x5c, 0xe3, 0x5d, 0x9b, 0x1d, 0xc7, 0x0c, 0xaf, 0x40, 0x35, 0x73, 0xcc,
	0xcb, 0xa3, 0xa0, 0x5a, 0x46, 0xd1, 0xf4, 0x2d, 0x19, 0x82, 0x5f, 0xb5, 0x0b, 0xf3, 0x25, 0xfb,
	0xe7, 0x9f, 0x65, 0x21, 0x8e, 0x62, 0xe0, 0xbf, 0x5d, 0xc6, 0x81, 0xe2, 0xfc, 0x66, 0x4b, 0x93,
	0xdb, 0x2d, 0x4d, 0xfe, 0x6c, 0x69, 0xf2, 0x6d, 0x47, 0x7b, 0xb7, 0x3b, 0xda, 0xfb, 0xb9, 0xa3,
	0xbd, 0xcf, 0xfc, 0x9e, 0x35, 0x27, 0xd6, 0x0a, 0xb4, 0x3b, 0xeb, 0x2c, 0xee, 0x2f, 0xeb, 0x4b,
	0x77, 0x5b, 0xc1, 0xa7, 0x3c, 0x08, 0x87, 0xf0, 0xe6, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe,
	0x13, 0x8b, 0xd2, 0x79, 0x02, 0x00, 0x00,
}

func (m *Lock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Lock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Lock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintStake(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Epoch) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Epoch) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Epoch) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Distribute != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.Distribute))
		i--
		dAtA[i] = 0x20
	}
	if m.Length != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x18
	}
	if m.Number != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if m.EndBlock != 0 {
		i = encodeVarintStake(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StakeState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StakeState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StakeState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Epoch.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.TotalReserve.Size()
		i -= size
		if _, err := m.TotalReserve.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintStake(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintStake(dAtA []byte, offset int, v uint64) int {
	offset -= sovStake(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Lock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovStake(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovStake(uint64(l))
	return n
}

func (m *Epoch) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EndBlock != 0 {
		n += 1 + sovStake(uint64(m.EndBlock))
	}
	if m.Number != 0 {
		n += 1 + sovStake(uint64(m.Number))
	}
	if m.Length != 0 {
		n += 1 + sovStake(uint64(m.Length))
	}
	if m.Distribute != 0 {
		n += 1 + sovStake(uint64(m.Distribute))
	}
	return n
}

func (m *StakeState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalReserve.Size()
	n += 1 + l + sovStake(uint64(l))
	l = m.Epoch.Size()
	n += 1 + l + sovStake(uint64(l))
	return n
}

func sovStake(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStake(x uint64) (n int) {
	return sovStake(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Lock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Lock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Lock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Epoch) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Epoch: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Epoch: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distribute", wireType)
			}
			m.Distribute = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Distribute |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StakeState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStake
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StakeState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StakeState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalReserve", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalReserve.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStake
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStake
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStake
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStake(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStake
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStake(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStake
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStake
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStake
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStake
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStake
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStake        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStake          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStake = fmt.Errorf("proto: unexpected end of group")
)
