// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: arbiter/stake/v1beta/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//=============================== Balance
type QueryBalanceRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *QueryBalanceRequest) Reset()         { *m = QueryBalanceRequest{} }
func (m *QueryBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceRequest) ProtoMessage()    {}
func (*QueryBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{0}
}
func (m *QueryBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceRequest.Merge(m, src)
}
func (m *QueryBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceRequest proto.InternalMessageInfo

func (m *QueryBalanceRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type QueryBalanceResponse struct {
	Balance *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance,omitempty"`
}

func (m *QueryBalanceResponse) Reset()         { *m = QueryBalanceResponse{} }
func (m *QueryBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBalanceResponse) ProtoMessage()    {}
func (*QueryBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{1}
}
func (m *QueryBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBalanceResponse.Merge(m, src)
}
func (m *QueryBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBalanceResponse proto.InternalMessageInfo

//=============================== Staked
type QueryStakedRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *QueryStakedRequest) Reset()         { *m = QueryStakedRequest{} }
func (m *QueryStakedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakedRequest) ProtoMessage()    {}
func (*QueryStakedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{2}
}
func (m *QueryStakedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedRequest.Merge(m, src)
}
func (m *QueryStakedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedRequest proto.InternalMessageInfo

func (m *QueryStakedRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type QueryStakedResponse struct {
	Staked *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=staked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staked,omitempty"`
}

func (m *QueryStakedResponse) Reset()         { *m = QueryStakedResponse{} }
func (m *QueryStakedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakedResponse) ProtoMessage()    {}
func (*QueryStakedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{3}
}
func (m *QueryStakedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakedResponse.Merge(m, src)
}
func (m *QueryStakedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakedResponse proto.InternalMessageInfo

//=============================== TimeUntilRebase
type QueryTimeUntilRebaseRequest struct {
}

func (m *QueryTimeUntilRebaseRequest) Reset()         { *m = QueryTimeUntilRebaseRequest{} }
func (m *QueryTimeUntilRebaseRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTimeUntilRebaseRequest) ProtoMessage()    {}
func (*QueryTimeUntilRebaseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{4}
}
func (m *QueryTimeUntilRebaseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTimeUntilRebaseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTimeUntilRebaseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTimeUntilRebaseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTimeUntilRebaseRequest.Merge(m, src)
}
func (m *QueryTimeUntilRebaseRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTimeUntilRebaseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTimeUntilRebaseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTimeUntilRebaseRequest proto.InternalMessageInfo

type QueryTimeUntilRebaseResponse struct {
	BlockUntilRebase int64 `protobuf:"varint,1,opt,name=blockUntilRebase,proto3" json:"blockUntilRebase,omitempty"`
}

func (m *QueryTimeUntilRebaseResponse) Reset()         { *m = QueryTimeUntilRebaseResponse{} }
func (m *QueryTimeUntilRebaseResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTimeUntilRebaseResponse) ProtoMessage()    {}
func (*QueryTimeUntilRebaseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{5}
}
func (m *QueryTimeUntilRebaseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTimeUntilRebaseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTimeUntilRebaseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTimeUntilRebaseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTimeUntilRebaseResponse.Merge(m, src)
}
func (m *QueryTimeUntilRebaseResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTimeUntilRebaseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTimeUntilRebaseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTimeUntilRebaseResponse proto.InternalMessageInfo

func (m *QueryTimeUntilRebaseResponse) GetBlockUntilRebase() int64 {
	if m != nil {
		return m.BlockUntilRebase
	}
	return 0
}

//=============================== RewardYield
type QueryRewardYieldRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *QueryRewardYieldRequest) Reset()         { *m = QueryRewardYieldRequest{} }
func (m *QueryRewardYieldRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardYieldRequest) ProtoMessage()    {}
func (*QueryRewardYieldRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{6}
}
func (m *QueryRewardYieldRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardYieldRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardYieldRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardYieldRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardYieldRequest.Merge(m, src)
}
func (m *QueryRewardYieldRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardYieldRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardYieldRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardYieldRequest proto.InternalMessageInfo

func (m *QueryRewardYieldRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type QueryRewardYieldResponse struct {
	RewardYield *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=rewardYield,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rewardYield,omitempty"`
}

func (m *QueryRewardYieldResponse) Reset()         { *m = QueryRewardYieldResponse{} }
func (m *QueryRewardYieldResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardYieldResponse) ProtoMessage()    {}
func (*QueryRewardYieldResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{7}
}
func (m *QueryRewardYieldResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardYieldResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardYieldResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardYieldResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardYieldResponse.Merge(m, src)
}
func (m *QueryRewardYieldResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardYieldResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardYieldResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardYieldResponse proto.InternalMessageInfo

//=============================== StakeInfo
type QueryStakeInfoRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
}

func (m *QueryStakeInfoRequest) Reset()         { *m = QueryStakeInfoRequest{} }
func (m *QueryStakeInfoRequest) String() string { return proto.CompactTextString(m) }
func (*QueryStakeInfoRequest) ProtoMessage()    {}
func (*QueryStakeInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{8}
}
func (m *QueryStakeInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeInfoRequest.Merge(m, src)
}
func (m *QueryStakeInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeInfoRequest proto.InternalMessageInfo

func (m *QueryStakeInfoRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

type QueryStakeInfoResponse struct {
	Balance          *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=balance,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"balance,omitempty"`
	Staked           *github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,2,opt,name=staked,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"staked,omitempty"`
	BlockUntilRebase int64                                   `protobuf:"varint,3,opt,name=blockUntilRebase,proto3" json:"blockUntilRebase,omitempty"`
	RewardYield      *github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=rewardYield,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"rewardYield,omitempty"`
}

func (m *QueryStakeInfoResponse) Reset()         { *m = QueryStakeInfoResponse{} }
func (m *QueryStakeInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryStakeInfoResponse) ProtoMessage()    {}
func (*QueryStakeInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa5558554306a625, []int{9}
}
func (m *QueryStakeInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryStakeInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryStakeInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryStakeInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryStakeInfoResponse.Merge(m, src)
}
func (m *QueryStakeInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryStakeInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryStakeInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryStakeInfoResponse proto.InternalMessageInfo

func (m *QueryStakeInfoResponse) GetBlockUntilRebase() int64 {
	if m != nil {
		return m.BlockUntilRebase
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryBalanceRequest)(nil), "arbiter.stake.v1beta1.QueryBalanceRequest")
	proto.RegisterType((*QueryBalanceResponse)(nil), "arbiter.stake.v1beta1.QueryBalanceResponse")
	proto.RegisterType((*QueryStakedRequest)(nil), "arbiter.stake.v1beta1.QueryStakedRequest")
	proto.RegisterType((*QueryStakedResponse)(nil), "arbiter.stake.v1beta1.QueryStakedResponse")
	proto.RegisterType((*QueryTimeUntilRebaseRequest)(nil), "arbiter.stake.v1beta1.QueryTimeUntilRebaseRequest")
	proto.RegisterType((*QueryTimeUntilRebaseResponse)(nil), "arbiter.stake.v1beta1.QueryTimeUntilRebaseResponse")
	proto.RegisterType((*QueryRewardYieldRequest)(nil), "arbiter.stake.v1beta1.QueryRewardYieldRequest")
	proto.RegisterType((*QueryRewardYieldResponse)(nil), "arbiter.stake.v1beta1.QueryRewardYieldResponse")
	proto.RegisterType((*QueryStakeInfoRequest)(nil), "arbiter.stake.v1beta1.QueryStakeInfoRequest")
	proto.RegisterType((*QueryStakeInfoResponse)(nil), "arbiter.stake.v1beta1.QueryStakeInfoResponse")
}

func init() { proto.RegisterFile("arbiter/stake/v1beta/query.proto", fileDescriptor_aa5558554306a625) }

var fileDescriptor_aa5558554306a625 = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xc1, 0x6e, 0xd3, 0x3e,
	0x00, 0xc6, 0x97, 0xee, 0xff, 0xef, 0x34, 0x4f, 0x08, 0x30, 0x1b, 0x4c, 0x61, 0x4b, 0x4b, 0xa6,
	0x4d, 0x6b, 0x46, 0x63, 0xba, 0xdd, 0xb8, 0x80, 0xaa, 0x5e, 0x8a, 0xb8, 0x10, 0xe0, 0x30, 0x84,
	0x54, 0x39, 0xad, 0x97, 0x45, 0x4d, 0xed, 0x2c, 0x76, 0x81, 0xde, 0x10, 0x07, 0x0e, 0x9c, 0x90,
	0x76, 0x84, 0x47, 0xe0, 0x41, 0x38, 0x4e, 0xe2, 0x82, 0x38, 0x4c, 0xa8, 0xe5, 0x09, 0x78, 0x02,
	0x54, 0xc7, 0x65, 0x59, 0x9b, 0x96, 0xae, 0x70, 0x6a, 0x65, 0x7f, 0xfe, 0xfc, 0xeb, 0x67, 0x7f,
	0x2e, 0xc8, 0xe3, 0xc8, 0xf5, 0x05, 0x89, 0x10, 0x17, 0xb8, 0x49, 0xd0, 0x8b, 0x92, 0x4b, 0x04,
	0x46, 0x47, 0x6d, 0x12, 0x75, 0xec, 0x30, 0x62, 0x82, 0xc1, 0x15, 0xa5, 0xb0, 0xa5, 0xc2, 0x8e,
	0x15, 0x25, 0x7d, 0xd9, 0x63, 0x1e, 0x93, 0x0a, 0xd4, 0xff, 0x16, 0x8b, 0xf5, 0x35, 0x8f, 0x31,
	0x2f, 0x20, 0x08, 0x87, 0x3e, 0xc2, 0x94, 0x32, 0x81, 0x85, 0xcf, 0x28, 0x57, 0xb3, 0x56, 0x9d,
	0xf1, 0x16, 0xe3, 0xc8, 0xc5, 0x9c, 0xc4, 0x7b, 0xa8, 0x0d, 0x4b, 0x28, 0xc4, 0x9e, 0x4f, 0xa5,
	0x38, 0xd6, 0x9a, 0xf7, 0xc1, 0xb5, 0x47, 0x7d, 0x45, 0x19, 0x07, 0x98, 0xd6, 0x89, 0x43, 0x8e,
	0xda, 0x84, 0x0b, 0x58, 0x00, 0x59, 0x4e, 0x68, 0x83, 0x44, 0xab, 0x5a, 0x5e, 0xdb, 0x5e, 0x2c,
	0x5f, 0xfd, 0x79, 0x9a, 0xbb, 0xd4, 0xc1, 0xad, 0xe0, 0xae, 0x19, 0x8f, 0x9b, 0x8e, 0x12, 0x98,
	0xcf, 0xc1, 0xf2, 0x79, 0x07, 0x1e, 0x32, 0xca, 0x09, 0xac, 0x80, 0x05, 0x37, 0x1e, 0x52, 0x1e,
	0xd6, 0xb7, 0xd3, 0xdc, 0x96, 0xe7, 0x8b, 0xc3, 0xb6, 0x6b, 0xd7, 0x59, 0x0b, 0x29, 0xca, 0xf8,
	0xa3, 0xc8, 0x1b, 0x4d, 0x24, 0x3a, 0x21, 0xe1, 0x76, 0x95, 0x0a, 0x67, 0xb0, 0xd4, 0xbc, 0x07,
	0xa0, 0x74, 0x7f, 0xdc, 0x4f, 0xa5, 0x31, 0x03, 0xde, 0xbe, 0xfa, 0x81, 0x03, 0x03, 0x45, 0x57,
	0x06, 0x59, 0x19, 0x74, 0x63, 0x06, 0x38, 0xb5, 0xd2, 0x5c, 0x07, 0x37, 0xa5, 0xf5, 0x13, 0xbf,
	0x45, 0x9e, 0x52, 0xe1, 0x07, 0x0e, 0xe9, 0x47, 0xae, 0x20, 0xcd, 0x07, 0x60, 0x2d, 0x7d, 0x5a,
	0x21, 0x58, 0xe0, 0x8a, 0x1b, 0xb0, 0x7a, 0x33, 0x31, 0x27, 0x61, 0xe6, 0x9d, 0x91, 0x71, 0xb3,
	0x02, 0x6e, 0x48, 0x2f, 0x87, 0xbc, 0xc4, 0x51, 0x63, 0xdf, 0x27, 0xc1, 0x2c, 0x59, 0x1c, 0x82,
	0xd5, 0x51, 0x17, 0x45, 0xf3, 0x10, 0x2c, 0x45, 0x67, 0xc3, 0x17, 0x4c, 0xa5, 0x42, 0xea, 0x4e,
	0x72, 0xb9, 0x59, 0x06, 0x2b, 0x67, 0xa9, 0x57, 0xe9, 0x01, 0x9b, 0x81, 0xf6, 0x63, 0x06, 0x5c,
	0x1f, 0x36, 0xf9, 0x97, 0x77, 0x2b, 0x71, 0x07, 0x32, 0xb3, 0xde, 0x81, 0xd4, 0x43, 0x9c, 0x4f,
	0x3f, 0xc4, 0xe1, 0x88, 0xff, 0xfb, 0xab, 0x88, 0x77, 0x5f, 0x67, 0xc1, 0xff, 0x32, 0x1e, 0xf8,
	0x4e, 0x03, 0x0b, 0xaa, 0x7d, 0xd0, 0xb2, 0x53, 0xdf, 0x11, 0x3b, 0xa5, 0xe4, 0xfa, 0xce, 0x54,
	0xda, 0x38, 0x72, 0x73, 0xeb, 0xcd, 0x97, 0x1f, 0xc7, 0x99, 0x3c, 0x34, 0x50, 0xda, 0x53, 0x56,
	0x42, 0x83, 0x50, 0xdf, 0x6a, 0x20, 0x1b, 0x77, 0x0d, 0x16, 0x26, 0xf9, 0x9f, 0x2b, 0xb4, 0x6e,
	0x4d, 0x23, 0x55, 0x24, 0x9b, 0x92, 0x24, 0x07, 0xd7, 0xc7, 0x90, 0xa8, 0x93, 0xf9, 0xa4, 0x81,
	0xcb, 0x43, 0xd5, 0x83, 0xbb, 0x93, 0xb6, 0x49, 0xaf, 0xb1, 0xbe, 0x77, 0xa1, 0x35, 0x8a, 0xf1,
	0x8e, 0x64, 0xb4, 0xe0, 0xf6, 0x18, 0x46, 0xe1, 0xb7, 0x48, 0xad, 0xdd, 0x5f, 0x58, 0x8b, 0x62,
	0xb4, 0x0f, 0x1a, 0x58, 0x4a, 0xf4, 0x12, 0xda, 0x93, 0xb6, 0x1d, 0x7d, 0x06, 0x74, 0x34, 0xb5,
	0x5e, 0x21, 0xee, 0x48, 0xc4, 0x4d, 0xb8, 0x31, 0x06, 0x31, 0xbe, 0x6b, 0xb5, 0x8e, 0xa4, 0x39,
	0xd6, 0xc0, 0xe2, 0xef, 0x1a, 0xc2, 0xdb, 0x7f, 0x3c, 0xad, 0x44, 0xe5, 0xf5, 0xe2, 0x94, 0x6a,
	0xc5, 0x55, 0x90, 0x5c, 0x1b, 0xf0, 0xd6, 0xa4, 0xe3, 0xad, 0xf9, 0xf4, 0x80, 0x95, 0xab, 0x9f,
	0xbb, 0x86, 0x76, 0xd2, 0x35, 0xb4, 0xef, 0x5d, 0x43, 0x7b, 0xdf, 0x33, 0xe6, 0x4e, 0x7a, 0xc6,
	0xdc, 0xd7, 0x9e, 0x31, 0xf7, 0x0c, 0x25, 0x1a, 0xc5, 0x71, 0xe8, 0x13, 0xca, 0x8b, 0xaa, 0x59,
	0x03, 0xd7, 0x57, 0xca, 0x57, 0xd6, 0xcb, 0xcd, 0xca, 0xbf, 0xc3, 0xbd, 0x5f, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xfa, 0x98, 0x96, 0x07, 0xa9, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Balance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error)
	Staked(ctx context.Context, in *QueryStakedRequest, opts ...grpc.CallOption) (*QueryStakedResponse, error)
	TimeUntilRebase(ctx context.Context, in *QueryTimeUntilRebaseRequest, opts ...grpc.CallOption) (*QueryTimeUntilRebaseResponse, error)
	RewardYield(ctx context.Context, in *QueryRewardYieldRequest, opts ...grpc.CallOption) (*QueryRewardYieldResponse, error)
	StakeInfo(ctx context.Context, in *QueryStakeInfoRequest, opts ...grpc.CallOption) (*QueryStakeInfoResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Balance(ctx context.Context, in *QueryBalanceRequest, opts ...grpc.CallOption) (*QueryBalanceResponse, error) {
	out := new(QueryBalanceResponse)
	err := c.cc.Invoke(ctx, "/arbiter.stake.v1beta1.Query/Balance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Staked(ctx context.Context, in *QueryStakedRequest, opts ...grpc.CallOption) (*QueryStakedResponse, error) {
	out := new(QueryStakedResponse)
	err := c.cc.Invoke(ctx, "/arbiter.stake.v1beta1.Query/Staked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimeUntilRebase(ctx context.Context, in *QueryTimeUntilRebaseRequest, opts ...grpc.CallOption) (*QueryTimeUntilRebaseResponse, error) {
	out := new(QueryTimeUntilRebaseResponse)
	err := c.cc.Invoke(ctx, "/arbiter.stake.v1beta1.Query/TimeUntilRebase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardYield(ctx context.Context, in *QueryRewardYieldRequest, opts ...grpc.CallOption) (*QueryRewardYieldResponse, error) {
	out := new(QueryRewardYieldResponse)
	err := c.cc.Invoke(ctx, "/arbiter.stake.v1beta1.Query/RewardYield", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StakeInfo(ctx context.Context, in *QueryStakeInfoRequest, opts ...grpc.CallOption) (*QueryStakeInfoResponse, error) {
	out := new(QueryStakeInfoResponse)
	err := c.cc.Invoke(ctx, "/arbiter.stake.v1beta1.Query/StakeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Balance(context.Context, *QueryBalanceRequest) (*QueryBalanceResponse, error)
	Staked(context.Context, *QueryStakedRequest) (*QueryStakedResponse, error)
	TimeUntilRebase(context.Context, *QueryTimeUntilRebaseRequest) (*QueryTimeUntilRebaseResponse, error)
	RewardYield(context.Context, *QueryRewardYieldRequest) (*QueryRewardYieldResponse, error)
	StakeInfo(context.Context, *QueryStakeInfoRequest) (*QueryStakeInfoResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Balance(ctx context.Context, req *QueryBalanceRequest) (*QueryBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (*UnimplementedQueryServer) Staked(ctx context.Context, req *QueryStakedRequest) (*QueryStakedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Staked not implemented")
}
func (*UnimplementedQueryServer) TimeUntilRebase(ctx context.Context, req *QueryTimeUntilRebaseRequest) (*QueryTimeUntilRebaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimeUntilRebase not implemented")
}
func (*UnimplementedQueryServer) RewardYield(ctx context.Context, req *QueryRewardYieldRequest) (*QueryRewardYieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardYield not implemented")
}
func (*UnimplementedQueryServer) StakeInfo(ctx context.Context, req *QueryStakeInfoRequest) (*QueryStakeInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeInfo not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbiter.stake.v1beta1.Query/Balance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Balance(ctx, req.(*QueryBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Staked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Staked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbiter.stake.v1beta1.Query/Staked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Staked(ctx, req.(*QueryStakedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimeUntilRebase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTimeUntilRebaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimeUntilRebase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbiter.stake.v1beta1.Query/TimeUntilRebase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimeUntilRebase(ctx, req.(*QueryTimeUntilRebaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardYield_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardYieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardYield(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbiter.stake.v1beta1.Query/RewardYield",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardYield(ctx, req.(*QueryRewardYieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StakeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StakeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arbiter.stake.v1beta1.Query/StakeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StakeInfo(ctx, req.(*QueryStakeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arbiter.stake.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Balance",
			Handler:    _Query_Balance_Handler,
		},
		{
			MethodName: "Staked",
			Handler:    _Query_Staked_Handler,
		},
		{
			MethodName: "TimeUntilRebase",
			Handler:    _Query_TimeUntilRebase_Handler,
		},
		{
			MethodName: "RewardYield",
			Handler:    _Query_RewardYield_Handler,
		},
		{
			MethodName: "StakeInfo",
			Handler:    _Query_StakeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "arbiter/stake/v1beta/query.proto",
}

func (m *QueryBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Balance != nil {
		{
			size := m.Balance.Size()
			i -= size
			if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Staked != nil {
		{
			size := m.Staked.Size()
			i -= size
			if _, err := m.Staked.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTimeUntilRebaseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTimeUntilRebaseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTimeUntilRebaseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTimeUntilRebaseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTimeUntilRebaseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTimeUntilRebaseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockUntilRebase != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockUntilRebase))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardYieldRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardYieldRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardYieldRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardYieldResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardYieldResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardYieldResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardYield != nil {
		{
			size := m.RewardYield.Size()
			i -= size
			if _, err := m.RewardYield.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeInfoRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryStakeInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryStakeInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryStakeInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RewardYield != nil {
		{
			size := m.RewardYield.Size()
			i -= size
			if _, err := m.RewardYield.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.BlockUntilRebase != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BlockUntilRebase))
		i--
		dAtA[i] = 0x18
	}
	if m.Staked != nil {
		{
			size := m.Staked.Size()
			i -= size
			if _, err := m.Staked.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Balance != nil {
		{
			size := m.Balance.Size()
			i -= size
			if _, err := m.Balance.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Staked != nil {
		l = m.Staked.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTimeUntilRebaseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTimeUntilRebaseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockUntilRebase != 0 {
		n += 1 + sovQuery(uint64(m.BlockUntilRebase))
	}
	return n
}

func (m *QueryRewardYieldRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardYieldResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RewardYield != nil {
		l = m.RewardYield.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryStakeInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Balance != nil {
		l = m.Balance.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Staked != nil {
		l = m.Staked.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.BlockUntilRebase != 0 {
		n += 1 + sovQuery(uint64(m.BlockUntilRebase))
	}
	if m.RewardYield != nil {
		l = m.RewardYield.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Balance = &v
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Staked = &v
			if err := m.Staked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTimeUntilRebaseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTimeUntilRebaseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTimeUntilRebaseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTimeUntilRebaseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTimeUntilRebaseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTimeUntilRebaseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockUntilRebase", wireType)
			}
			m.BlockUntilRebase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockUntilRebase |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardYieldRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardYieldRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardYieldRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardYieldResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardYieldResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardYieldResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardYield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.RewardYield = &v
			if err := m.RewardYield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryStakeInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryStakeInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryStakeInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Balance = &v
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Staked", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Int
			m.Staked = &v
			if err := m.Staked.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockUntilRebase", wireType)
			}
			m.BlockUntilRebase = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockUntilRebase |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardYield", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var v github_com_cosmos_cosmos_sdk_types.Dec
			m.RewardYield = &v
			if err := m.RewardYield.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
